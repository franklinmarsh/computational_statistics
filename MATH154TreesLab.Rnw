\documentclass{article}

\begin{document}

<<>>=

# In addition to using the kaggle data, load the data set mtcars into R via the
# command data(mtcars). Try to predict the fuel efficiency (mpg) via a regression tree, and try to predict the transmission type (automatic or manual) via a classification
# tree.
#You may want to compare the regression tree to a linear model.
# plot(mtcars) will give you all the pairwise scatter plots. Notice that most of the
# relationships with MPG are non-linear.

# Additionally, R has a package called randomForest. The most useful function,
# which implements the algorithm discussed in class, is of the same name. Compare
# the classification rates for a random forest to that of a simple tree.

install.packages("tree")
install.packages("randomForest")
library(tree)
library(randomForest)
library(datasets)
data(mtcars)
mtcars
names(mtcars)
dim(mtcars)


# Regression Tree
test.index = sample(c(1:nrow(mtcars)),nrow(mtcars)/2 )
training.index= c(1:nrow(mtcars))[-test.index]

test.data = mtcars[test.index,]
training.data = mtcars[training.index,]

cars.regression <- tree(mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data=training.data)
plot(cars.regression )
text(cars.regression , cex=.75)

my.prediction <- predict(cars.regression, test.data)

# find RSS 
residuals = (test.data$mpg - my.prediction)^2
sum(residuals^2)
# plot residuals 
plot(residuals)
# plot of actual and predictions
plot(test.data$mpg)
points(my.prediction, col = 'red')

# Classification Tree
# Use a classification tree to predict transmission type of car
# Transmission (0 = automatic, 1 = manual)
cars.class<-tree(am ~ mpg+cyl+disp+hp+drat+wt+qsec+vs+gear+carb, data=training.data)
summary(cars.class)

plot(cars.class)
text(cars.class)


my.prediction.class <- predict(cars.class, test.data)
plot(test.data$am)
points(my.prediction.class,col = 'purple', pch = ".")

# how many incorrect predictions 
incorrect.predict = sum(abs(my.prediction.class - test.data$am) > .5)
incorrect.predict
# proportion of correct predictions 
(nrow(test.data) - incorrect.predict )/ nrow(test.data)

#####
# Comparing to a Linear model 
plot(mtcars)

cars.lm <- lm ( mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data= training.data)
prediction.lm <- predict(cars.lm, test.data)
# find RSS 
residuals.lm = (test.data$mpg - prediction.lm)^2
sum(residuals.lm^2)
# plot residuals 
plot(residuals.lm, main = "Residuals from Linear Model")
# plot of actual and predictions
plot(test.data$mpg, main= "Plot of Actual vs. Prediction from Linear Model")
points(prediction.lm, col = 'red')

# to do: 
# reduce the number f variables? stepwise regression?
# consider nonlinear relationships 


\end{document}